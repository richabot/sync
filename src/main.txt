import * as React from 'react';
import { TreeGridComponent, ColumnsDirective, ColumnDirective, Page, Inject, Edit, Toolbar, ContextMenu, Sort, Resize, ExcelExport, PdfExport, RowDD ,Filter,Freeze,ColumnChooser,TreeGrid} from '@syncfusion/ej2-react-treegrid';
import {summaryData} from "./data"
import { PropertyPane } from './Property-pane';
import { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns';

function Tablegrid() {
 
    const toolbarOptions = ['ColumnChooser','Add','Edit','Delete','Update','Cancel'];


        let typeDropdownObj;
    let modeDropdownObj;
    let treegridObj;
    const types = [
        { id: 'Single', type: 'Single' },
        { id: 'Multiple', type: 'Multiple' }
    ];
    const modes = [
        { id: 'Row', mode: 'Row' },
        { id: 'Cell', mode: 'Cell' },
    ];
    const cellmodes = [
        { id: 'Flow', mode: 'Flow' },
        { id: 'Box', mode: 'Box' }
    ];
    function typeChange(args) {
        let type = args.value;
        let mode = modeDropdownObj.value;
        treegridObj.selectionSettings.type = type;
        if (type === 'Multiple' && mode === 'Cell') {
            document.getElementById('cellselection').style.display = 'table-row';
        }
        else {
            document.getElementById('cellselection').style.display = 'none';
        }
    }
    function modeChange(args) {
        let mode = args.value;
        let type = typeDropdownObj.value;
        treegridObj.selectionSettings.mode = mode;
        if (type === 'Multiple' && mode === 'Cell') {
            document.getElementById('cellselection').style.display = 'table-row';
        }
        else {
            document.getElementById('cellselection').style.display = 'none';
        }
    }
    function cellmodeChange(args) {
        let cellmode = args.value;
        treegridObj.selectionSettings.cellSelectionMode = cellmode;
    }


    //edit delete
const editOption={
    allowEditing:true,
    allowDeleting:true,
    allowAdding:true,

}


    return (
      <>
        <TreeGridComponent dataSource={summaryData} 
        childMapping='subtask'
        treeColumnIndex={1}
        // allowPaging={true}
        allowSorting={true}
        allowFiltering={true}
        frozenColumns={2}
        showColumnChooser={true} toolbar={toolbarOptions}
        // allowSelection={false} 
        allowResizing={true}
        allowSelection={true}
         selectionSettings={{ type: 'Multiple' }}
          pageSettings={{ pageSize: 10 }}
           ref={treegrid => treegridObj = treegrid}
        filterSettings={{
            ignoreAccent:true,
            type:"Menu",
            hierarchyMode:"None",
            itemTemplate: "flagtemplate",
          




        }}
        
       editSettings={editOption}

        >
            <Inject services={[Freeze,Sort,Filter, Toolbar, ColumnChooser,Edit]}/>
            <ColumnsDirective>
            <ColumnDirective field='ID' headerText='ID' width='150' textAlign='Right'> </ColumnDirective>
            <ColumnDirective field='Name' headerText='Name' textAlign='Right'> </ColumnDirective>
            <ColumnDirective field='category' headerText='category' textAlign='Right'> </ColumnDirective>
            <ColumnDirective field='units' headerText='units'textAlign='Right' > </ColumnDirective>
            <ColumnDirective field='units1' headerText='units'textAlign='Right' > </ColumnDirective>
            <ColumnDirective field='units2' headerText='units'textAlign='Right' > </ColumnDirective>
            <ColumnDirective field='units3' headerText='units'textAlign='Right' > </ColumnDirective>
            <ColumnDirective field='unitPrice' headerText='unitPrice' textAlign='Right'> </ColumnDirective>
            <ColumnDirective field='price' headerText='Price' format='C2' textAlign='Right'> </ColumnDirective>
            <ColumnDirective field='priceE' headerText='PriceE' format='C2' textAlign='Right'> </ColumnDirective>
            </ColumnsDirective>
        </TreeGridComponent>
    

                <div className='col-md-3 property-section'>
          <PropertyPane title='Properties'>
            <table id='property' title='Properties' className='property-panel-table' style={{ width: '100%' }}>
              <tr>
                <td style={{ width: '30%' }}>
                  <div style={{ paddingTop: '7px', paddingLeft: '2px' }}> Selection Type </div>
                </td>
                <td style={{ width: '70%', paddingRight: '10px' }}>
                  <div>
                    <DropDownListComponent width="100px" id="type" change={typeChange.bind(this)} dataSource={types} fields={{ text: 'type', value: 'id' }} value="Multiple" ref={dropdown => typeDropdownObj = dropdown}/>
                  </div>
                </td>
              </tr>
              <tr>
                <td style={{ width: '30%', paddingLeft: '2px' }}>
                  <div> Selection Mode </div>
                </td>
                <td style={{ width: '70%' }}>
                  <div style={{ paddingRight: '10px', paddingBottom: '10px' }}>
                    <DropDownListComponent width="100px" id="mode" change={modeChange.bind(this)} dataSource={modes} fields={{ text: 'mode', value: 'id' }} value="Row" ref={dropdown => modeDropdownObj = dropdown}/>
                  </div>
                </td>
              </tr>
              <tr id='cellselection' style={{ display: 'none' }}>
                <td style={{ width: '30%' }}>
                  <div> Cell Selection Mode </div>
                </td>
                <td style={{ width: '70%' }}>
                  <div style={{ paddingRight: '10px', paddingBottom: '10px' }}>
                    <DropDownListComponent width="100px" id="cellmode" change={cellmodeChange.bind(this)} dataSource={cellmodes} fields={{ text: 'mode', value: 'id' }} value="Flow"/>
                  </div>
                </td>
              </tr>
            </table>
          </PropertyPane>
        </div>
</>
        
    )
}
export default Tablegrid;